syntax = "proto3";

package cluster;

service ClusterService {
  // Coordinator election and consensus
  rpc RequestVote(VoteRequest) returns (VoteResponse);
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  
  // Node management
  rpc JoinCluster(JoinRequest) returns (JoinResponse);
  rpc LeaveCluster(LeaveRequest) returns (LeaveResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // Training coordination
  rpc StartTraining(StartTrainingRequest) returns (StartTrainingResponse);
  rpc StopTraining(StopTrainingRequest) returns (StopTrainingResponse);
  rpc SyncGradients(GradientSyncRequest) returns (GradientSyncResponse);
  
  // Monitoring
  rpc GetClusterStatus(StatusRequest) returns (StatusResponse);
  rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
}

// Raft consensus messages
message VoteRequest {
  int32 term = 1;
  string candidate_id = 2;
  int32 last_log_index = 3;
  int32 last_log_term = 4;
}

message VoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
}

message AppendEntriesRequest {
  int32 term = 1;
  string leader_id = 2;
  int32 prev_log_index = 3;
  int32 prev_log_term = 4;
  repeated LogEntry entries = 5;
  int32 leader_commit = 6;
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
}

message LogEntry {
  int32 term = 1;
  string command = 2;
  bytes data = 3;
}

// Node management messages
message JoinRequest {
  string node_id = 1;
  string node_type = 2; // "coordinator" or "worker"
  string address = 3;
  int32 port = 4;
  map<string, string> metadata = 5;
}

message JoinResponse {
  bool success = 1;
  string leader_id = 2;
  repeated NodeInfo cluster_nodes = 3;
  string message = 4;
}

message LeaveRequest {
  string node_id = 1;
  string reason = 2;
}

message LeaveResponse {
  bool success = 1;
  string message = 2;
}

message HeartbeatRequest {
  string node_id = 1;
  int32 term = 2;
  NodeStatus status = 3;
}

message HeartbeatResponse {
  bool success = 1;
  int32 term = 2;
  string leader_id = 3;
}

// Training coordination messages
message StartTrainingRequest {
  string model_config = 1;
  string dataset_config = 2;
  string sync_strategy = 3; // "allreduce", "parameter_server", "custom"
  map<string, string> hyperparameters = 4;
}

message StartTrainingResponse {
  bool success = 1;
  string training_id = 2;
  string message = 3;
}

message StopTrainingRequest {
  string training_id = 1;
  string reason = 2;
}

message StopTrainingResponse {
  bool success = 1;
  string message = 2;
}

message GradientSyncRequest {
  string training_id = 1;
  string node_id = 2;
  int32 iteration = 3;
  repeated TensorData gradients = 4;
  TrainingMetrics metrics = 5;
}

message GradientSyncResponse {
  bool success = 1;
  repeated TensorData averaged_gradients = 2;
  bool should_continue = 3;
}

// Data structures
message NodeInfo {
  string node_id = 1;
  string node_type = 2;
  string address = 3;
  int32 port = 4;
  NodeStatus status = 5;
  int64 last_seen = 6;
  map<string, string> metadata = 7;
}

enum NodeStatus {
  UNKNOWN = 0;
  JOINING = 1;
  ACTIVE = 2;
  TRAINING = 3;
  IDLE = 4;
  LEAVING = 5;
  FAILED = 6;
}

message TensorData {
  string name = 1;
  repeated int32 shape = 2;
  bytes data = 3;
  string dtype = 4;
}

message TrainingMetrics {
  float loss = 1;
  float accuracy = 2;
  int32 iteration = 3;
  float learning_rate = 4;
  int64 timestamp = 5;
  map<string, float> custom_metrics = 6;
}

// Monitoring messages
message StatusRequest {
  string node_id = 1;
}

message StatusResponse {
  string leader_id = 1;
  int32 term = 2;
  repeated NodeInfo nodes = 3;
  string training_status = 4;
  string training_id = 5;
  ClusterHealth health = 6;
}

message ClusterHealth {
  int32 total_nodes = 1;
  int32 healthy_nodes = 2;
  int32 failed_nodes = 3;
  bool consensus_healthy = 4;
  bool training_active = 5;
}

message MetricsRequest {
  string node_id = 1;
  int64 start_time = 2;
  int64 end_time = 3;
}

message MetricsResponse {
  repeated TrainingMetrics training_metrics = 1;
  repeated NodeMetrics node_metrics = 2;
  ClusterMetrics cluster_metrics = 3;
}

message NodeMetrics {
  string node_id = 1;
  float cpu_usage = 2;
  float memory_usage = 3;
  float network_io = 4;
  int64 timestamp = 5;
}

message ClusterMetrics {
  float total_throughput = 1;
  float average_loss = 2;
  float training_efficiency = 3;
  int32 total_iterations = 4;
}