# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import cluster_pb2 as cluster__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in cluster_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClusterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/cluster.ClusterService/RequestVote',
                request_serializer=cluster__pb2.VoteRequest.SerializeToString,
                response_deserializer=cluster__pb2.VoteResponse.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/cluster.ClusterService/AppendEntries',
                request_serializer=cluster__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=cluster__pb2.AppendEntriesResponse.FromString,
                _registered_method=True)
        self.JoinCluster = channel.unary_unary(
                '/cluster.ClusterService/JoinCluster',
                request_serializer=cluster__pb2.JoinRequest.SerializeToString,
                response_deserializer=cluster__pb2.JoinResponse.FromString,
                _registered_method=True)
        self.LeaveCluster = channel.unary_unary(
                '/cluster.ClusterService/LeaveCluster',
                request_serializer=cluster__pb2.LeaveRequest.SerializeToString,
                response_deserializer=cluster__pb2.LeaveResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/cluster.ClusterService/Heartbeat',
                request_serializer=cluster__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=cluster__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.StartTraining = channel.unary_unary(
                '/cluster.ClusterService/StartTraining',
                request_serializer=cluster__pb2.StartTrainingRequest.SerializeToString,
                response_deserializer=cluster__pb2.StartTrainingResponse.FromString,
                _registered_method=True)
        self.StopTraining = channel.unary_unary(
                '/cluster.ClusterService/StopTraining',
                request_serializer=cluster__pb2.StopTrainingRequest.SerializeToString,
                response_deserializer=cluster__pb2.StopTrainingResponse.FromString,
                _registered_method=True)
        self.SyncGradients = channel.unary_unary(
                '/cluster.ClusterService/SyncGradients',
                request_serializer=cluster__pb2.GradientSyncRequest.SerializeToString,
                response_deserializer=cluster__pb2.GradientSyncResponse.FromString,
                _registered_method=True)
        self.GetClusterStatus = channel.unary_unary(
                '/cluster.ClusterService/GetClusterStatus',
                request_serializer=cluster__pb2.StatusRequest.SerializeToString,
                response_deserializer=cluster__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetMetrics = channel.unary_unary(
                '/cluster.ClusterService/GetMetrics',
                request_serializer=cluster__pb2.MetricsRequest.SerializeToString,
                response_deserializer=cluster__pb2.MetricsResponse.FromString,
                _registered_method=True)


class ClusterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestVote(self, request, context):
        """Coordinator election and consensus
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinCluster(self, request, context):
        """Node management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTraining(self, request, context):
        """Training coordination
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncGradients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterStatus(self, request, context):
        """Monitoring
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=cluster__pb2.VoteRequest.FromString,
                    response_serializer=cluster__pb2.VoteResponse.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=cluster__pb2.AppendEntriesRequest.FromString,
                    response_serializer=cluster__pb2.AppendEntriesResponse.SerializeToString,
            ),
            'JoinCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinCluster,
                    request_deserializer=cluster__pb2.JoinRequest.FromString,
                    response_serializer=cluster__pb2.JoinResponse.SerializeToString,
            ),
            'LeaveCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveCluster,
                    request_deserializer=cluster__pb2.LeaveRequest.FromString,
                    response_serializer=cluster__pb2.LeaveResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=cluster__pb2.HeartbeatRequest.FromString,
                    response_serializer=cluster__pb2.HeartbeatResponse.SerializeToString,
            ),
            'StartTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTraining,
                    request_deserializer=cluster__pb2.StartTrainingRequest.FromString,
                    response_serializer=cluster__pb2.StartTrainingResponse.SerializeToString,
            ),
            'StopTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTraining,
                    request_deserializer=cluster__pb2.StopTrainingRequest.FromString,
                    response_serializer=cluster__pb2.StopTrainingResponse.SerializeToString,
            ),
            'SyncGradients': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncGradients,
                    request_deserializer=cluster__pb2.GradientSyncRequest.FromString,
                    response_serializer=cluster__pb2.GradientSyncResponse.SerializeToString,
            ),
            'GetClusterStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterStatus,
                    request_deserializer=cluster__pb2.StatusRequest.FromString,
                    response_serializer=cluster__pb2.StatusResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=cluster__pb2.MetricsRequest.FromString,
                    response_serializer=cluster__pb2.MetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cluster.ClusterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cluster.ClusterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClusterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/RequestVote',
            cluster__pb2.VoteRequest.SerializeToString,
            cluster__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/AppendEntries',
            cluster__pb2.AppendEntriesRequest.SerializeToString,
            cluster__pb2.AppendEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/JoinCluster',
            cluster__pb2.JoinRequest.SerializeToString,
            cluster__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LeaveCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/LeaveCluster',
            cluster__pb2.LeaveRequest.SerializeToString,
            cluster__pb2.LeaveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/Heartbeat',
            cluster__pb2.HeartbeatRequest.SerializeToString,
            cluster__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/StartTraining',
            cluster__pb2.StartTrainingRequest.SerializeToString,
            cluster__pb2.StartTrainingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/StopTraining',
            cluster__pb2.StopTrainingRequest.SerializeToString,
            cluster__pb2.StopTrainingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncGradients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/SyncGradients',
            cluster__pb2.GradientSyncRequest.SerializeToString,
            cluster__pb2.GradientSyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/GetClusterStatus',
            cluster__pb2.StatusRequest.SerializeToString,
            cluster__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cluster.ClusterService/GetMetrics',
            cluster__pb2.MetricsRequest.SerializeToString,
            cluster__pb2.MetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
